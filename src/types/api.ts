/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/admin/balances": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get balance sheets
     * @description Retrieves a paginated list of balance sheets
     */
    get: operations["getAdminBalanceSheets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/balances/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get balance sheet by ID
     * @description Retrieves a specific balance sheet by its ID
     */
    get: operations["getAdminBalanceSheetById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/invoices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invoices
     * @description Retrieves a paginated list of invoices
     */
    get: operations["getAdminInvoices"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/invoices/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invoice by ID
     * @description Retrieves a specific invoice by its ID
     */
    get: operations["getAdminInvoiceById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/invoices/{id}/pay": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Mark an invoice as paid
     * @description Marks a specific invoice as paid by an admin.
     */
    post: operations["payAdminInvoice"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/markups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin markups
     * @description Retrieves a paginated list of markups with optional filters.
     */
    get: operations["getAdminMarkups"];
    put?: never;
    /**
     * Create a new markup
     * @description Creates a new markup entry for the admin.
     */
    post: operations["createAdminMarkup"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/markups/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get markup by ID
     * @description Retrieves a specific markup by its ID
     */
    get: operations["getAdminMarkupById"];
    /**
     * Update an existing markup
     * @description Updates an existing markup entry for the admin.
     */
    put: operations["updateAdminMarkup"];
    post?: never;
    /**
     * Delete a markup
     * @description Deletes a specific markup by its ID
     */
    delete: operations["deleteAdminMarkup"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin orders
     * @description Retrieves a paginated list of orders with optional filters for admin.
     */
    get: operations["getAdminOrders"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/orders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin order by ID
     * @description Retrieves a specific order by its ID with additional status details for admin.
     */
    get: operations["getAdminOrderById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/orders/{id}/return": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Return products from an order
     * @description Processes the return of products from a specific order by an admin.
     */
    post: operations["returnAdminOrderProducts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/products": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin products
     * @description Retrieves a list of product modifications with an optional filter by user ID.
     */
    get: operations["getAdminProducts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/product-catalogs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin product catalogs
     * @description Retrieves a paginated list of product catalogs with optional filtering by user ID.
     */
    get: operations["getAdminProductCatalogs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/products/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin product by ID
     * @description Retrieves a specific product modification by its ID.
     */
    get: operations["getAdminProductById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin users
     * @description Retrieves a paginated list of users with optional filters.
     */
    get: operations["getAdminUsers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/users/{id}/activate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Activate a user
     * @description Activates a specific user account by an admin.
     */
    post: operations["activateAdminUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/admin/users/{id}/add-admin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Adds user to admin group
     * @description Adds user to admin group
     */
    post: operations["addAdminUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new user
     * @description Registers a new user and their company details
     */
    post: operations["registerUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Login
     * @description Authenticates a user and returns an access token
     */
    post: operations["loginUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Logout
     * @description Logs out the authenticated user
     */
    post: operations["logoutUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Profile
     * @description Get User Profile
     */
    get: operations["getUserProfile"];
    put?: never;
    /**
     * Update User Profile
     * @description Updates the authenticated user's profile details
     */
    post: operations["updateUserProfile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forgot-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Forgot Password
     * @description Sends a password reset link to the provided email address
     */
    post: operations["forgotPassword"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/reset-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reset Password
     * @description Resets the user's password using a 4-digit token
     */
    post: operations["resetPassword"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/balances": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get balance sheets
     * @description Retrieves a paginated list of balance sheets
     */
    get: operations["getBalanceSheets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/balances-summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get balance summary
     * @description Retrieves the summary of balance including earnings, balance, and total sales
     */
    get: operations["getBalanceSummary"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/balances/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get balance sheet by ID
     * @description Retrieves a specific balance sheet by its ID
     */
    get: operations["getBalanceSheetById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/carriage/couriers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get list of courier types
     * @description Returns a list of available courier types from the Couriers enum.
     */
    get: operations["getCouriers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/carriage/pickup-orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get paginated list of courier orders for authenticated user */
    get: operations["getPickupOrders"];
    put?: never;
    /** Create a courier order */
    post: operations["createPickupOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/carriage/pickup-orders/{id}/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Cancel a courier pickup
     * @description Sets the status of a courier order to cancelled.
     */
    post: operations["cancelPickupOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/carriage/pickup-orders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get courier order for user */
    get: operations["getPickupOrdersById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/invoices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invoices
     * @description Retrieves a paginated list of invoices
     */
    get: operations["getInvoices"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/invoices-summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invoice summary
     * @description Retrieves a summary of invoices, including total paid, total pending payout, and total invoice count
     */
    get: operations["getInvoiceSummary"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/invoices/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invoice by ID
     * @description Retrieves a specific invoice by its ID
     */
    get: operations["getInvoiceById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get orders with filters
     * @description Retrieves a paginated list of orders with optional filters
     */
    get: operations["getOrders"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get order statistics
     * @description Retrieves the total number of orders, total amount, and currency
     */
    get: operations["getOrderStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/order/daily-stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get daily order statistics
     * @description Retrieves daily total order amounts and currency for each day
     */
    get: operations["getDailyOrderStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get order count by status
     * @description Retrieves the count of orders grouped by their status
     */
    get: operations["getOrderCountByStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get order by ID
     * @description Retrieves a specific order by its ID with additional status details
     */
    get: operations["getOrderById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{id}/confirm": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Confirm an order
     * @description Marks a specific order as confirmed
     */
    post: operations["confirmOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{id}/address-card": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get address card for order
     * @description Marks a specific order as ready to ship
     */
    get: operations["prepareOrderToShip"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/orders/{id}/download-address-card": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download address card
     * @description Allows an authenticated user to download the address card PDF for their order.
     */
    get: operations["downloadOrderAddressCard"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{id}/ship": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Ship an order
     * @description Marks a specific order as shipped
     */
    post: operations["shipOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{id}/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Cancel an order
     * @description Marks a specific order as cancelled
     */
    post: operations["cancelOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/price-adjustments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get price adjustments
     * @description Retrieves a paginated list of price adjustments with optional filters
     */
    get: operations["getPriceAdjustments"];
    put?: never;
    /**
     * Create a new price adjustment
     * @description Creates a new price adjustment entry
     */
    post: operations["createPriceAdjustment"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/price-adjustments/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get price adjustment by ID
     * @description Retrieves a specific price adjustment by its ID
     */
    get: operations["getPriceAdjustmentById"];
    /**
     * Update a price adjustment
     * @description Updates an existing price adjustment entry
     */
    put: operations["updatePriceAdjustment"];
    post?: never;
    /**
     * Delete a price adjustment
     * @description Deletes a specific price adjustment by its ID
     */
    delete: operations["deletePriceAdjustment"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/products": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Products List
     * @description Get Products list for user
     */
    get: operations["getProducts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/product-catalogs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Product catalog
     * @description Get Product Catalog for user
     */
    get: operations["getProductCatalogs"];
    put?: never;
    /**
     * Insert Product catalog
     * @description Insert Product Catalog for user
     */
    post: operations["addProductCatalog"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/products/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Product By id
     * @description Get Product By id
     */
    get: operations["getProductById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/products/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get product categories
     * @description Returns a hardcoded nested array of product categories and subcategories.
     */
    get: operations["getProductCategories"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Balance Sheet
     * @description Details of a balance sheet
     */
    ABalanceSheet: {
      /**
       * @description The unique identifier of the revenue report
       * @example 1
       */
      id?: number;
      /**
       * Format: date
       * @description Start date of the reporting period
       * @example 2024-01-01
       */
      period_start?: string;
      /**
       * Format: date
       * @description End date of the reporting period
       * @example 2024-01-31
       */
      period_end?: string;
      /**
       * Format: float
       * @description Total revenue generated by the user
       * @example 5000.75
       */
      user_revenue?: number;
      /**
       * Format: float
       * @description Total revenue generated by the system
       * @example 5000.75
       */
      system_revenue?: number;
      /**
       * Format: float
       * @description Total amount of returns
       * @example 200.5
       */
      returns_amount?: number;
      /**
       * Format: float
       * @description Cost of commissions for returned items
       * @example 50
       */
      return_commissions_cost?: number;
      /**
       * Format: float
       * @description Cost of logistics for returned items
       * @example 30
       */
      return_logistics_cost?: number;
      /**
       * Format: float
       * @description Total payouts amount
       * @example 4500.25
       */
      payouts_amount?: number;
      /**
       * Format: date-time
       * @description Timestamp when the revenue report was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
    };
    /**
     * Balance Sheet Collection
     * @description A collection of balance sheets
     */
    ABalanceSheetCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["ABalanceSheet"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * AInvoice
     * @description Details of an invoice
     */
    AInvoice: {
      /**
       * @description Formatted unique identifier of the invoice
       * @example MST-0001
       */
      id?: string;
      /**
       * @description ID of the user associated with the invoice
       * @example 42
       */
      user_id?: number;
      /**
       * Format: date
       * @description Start date of the billing period
       * @example 2024-01-01
       */
      period_start?: string;
      /**
       * Format: date
       * @description End date of the billing period
       * @example 2024-01-31
       */
      period_end?: string;
      /**
       * @description Current status of the invoice
       * @example PAID
       */
      status?: string;
      /**
       * @description Type of invoice
       * @example DEBIT
       */
      type?: string;
      /**
       * @description Name of the invoiced company
       * @example Example Ltd.
       */
      invoice_company_name?: string;
      /**
       * @description Company registration code
       * @example 12345678
       */
      invoice_company_code?: string;
      /**
       * @description VAT number of the company
       * @example LT100001234
       */
      invoice_company_vat_code?: string;
      /**
       * @description Billing address of the company
       * @example 123 Business Street, Vilnius, Lithuania
       */
      invoice_company_address?: string;
      /**
       * @description Phone number of the invoiced company
       * @example +37060000000
       */
      invoice_company_phone?: string;
      /**
       * Format: email
       * @description Email of the invoiced company
       * @example finance@example.com
       */
      invoice_company_email?: string;
      /**
       * @description Bank name where payment is sent
       * @example Bank of Lithuania
       */
      bill_to_bank_name?: string;
      /**
       * @description Country of the receiving bank
       * @example Lithuania
       */
      bill_to_country?: string;
      /**
       * @description IBAN number of the receiving account
       * @example LT601010012345678901
       */
      bill_to_iban?: string;
      /**
       * @description SWIFT/BIC code of the receiving bank
       * @example LT100100
       */
      bill_to_swift?: string;
      /**
       * Format: float
       * @description Subtotal amount before VAT
       * @example 1000.5
       */
      invoice_subtotal?: number;
      /**
       * Format: float
       * @description VAT amount applied to the invoice
       * @example 210.11
       */
      invoice_vat?: number;
      /**
       * Format: float
       * @description Total amount including VAT
       * @example 1210.61
       */
      invoice_total?: number;
      /**
       * Format: date-time
       * @description Timestamp when the invoice was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Timestamp when the invoice was paid, or null if unpaid
       * @example 2024-03-20T10:00:00Z
       */
      paid_at?: string | null;
    };
    /**
     * Invoice Collection
     * @description A collection of invoices
     */
    AInvoiceCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["AInvoice"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * AMarkup
     * @description Details of a markup rule
     */
    AMarkup: {
      /**
       * @description Unique identifier of the markup rule
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the user to whom this markup is applicable
       * @example 42
       */
      applicable_user_id?: number;
      /**
       * @description Name of the markup rule
       * @example Holiday Markup
       */
      name?: string;
      /**
       * @description Marketplace where the markup applies
       * @example Amazon
       */
      marketplace?: string;
      /**
       * @description Category to which the markup applies
       * @example Electronics
       */
      category?: string;
      /**
       * @description Subcategory to which the markup applies
       * @example Laptops
       */
      subcategory?: string | null;
      /**
       * @description Subsubcategory to which the markup applies
       * @example Gaming Laptops
       */
      subsubcategory?: string | null;
      /**
       * Format: float
       * @description Percentage markup applied to the product price
       * @example 15.5
       */
      percent?: number;
      /**
       * Format: float
       * @description Minimum price range for markup application
       * @example 100
       */
      price_from?: number;
      /**
       * Format: float
       * @description Maximum price range for markup application
       * @example 500
       */
      price_to?: number;
      /**
       * Format: float
       * @description Additional commission price applied
       * @example 10
       */
      commission_price?: number;
      /**
       * Format: float
       * @description Additional logistics cost applied
       * @example 5
       */
      logistics_cost?: number;
      /**
       * Format: date-time
       * @description Timestamp when the markup rule was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
    };
    /**
     * Markup Collection
     * @description A collection of markups
     */
    AMarkupCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["AMarkup"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /** Admin Order Event */
    AOrderEvent: {
      /** @example TPT_ORDER_DELIVERED */
      event_code?: string;
      /** @example Order Delivered */
      event_name?: string;
      /** @example 2025-06-03T20:03:55.000000Z */
      event_date?: string;
    };
    /**
     * AOrderModification
     * @description Details of a modification within an order
     */
    AOrderModification: {
      /**
       * @description Unique identifier of the order modification
       * @example 1
       */
      id?: number;
      /**
       * @description Identifier of the related product modification
       * @example 101
       */
      modification_id?: number;
      /**
       * @description Quantity of the modified product in the order
       * @example 2
       */
      quantity?: number;
      /**
       * Format: float
       * @description Price of a single product unit
       * @example 49.99
       */
      product_price?: number;
      /**
       * Format: float
       * @description Total price for the quantity ordered
       * @example 99.98
       */
      total_price?: number;
      /** @description Product details associated with the modification */
      product?: {
        /**
         * @description Title of the main product
         * @example Wireless Headphones
         */
        title?: string;
        /**
         * @description Title of the specific product modification
         * @example Black Edition
         */
        modification_title?: string;
        /**
         * @description Category of the product
         * @example Electronics
         */
        category?: string;
        /**
         * @description Stock keeping unit (SKU) of the modification
         * @example SKU12345
         */
        sku?: string;
        /**
         * @description EAN barcode of the modification
         * @example 1234567890123
         */
        ean?: string;
        /**
         * Format: url
         * @description URL of the product image
         * @example https://example.com/images/product.jpg
         */
        image_url?: string;
      };
    };
    /**
     * Order Modification Collection
     * @description A collection of order modifications
     */
    AOrderModificationCollection: {
      data?: components["schemas"]["AOrderModification"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * AOrder
     * @description Details of an order
     */
    AOrder: {
      /**
       * @description Unique identifier of the order
       * @example 123
       */
      id?: number;
      /**
       * @description User ID associated with the order
       * @example 42
       */
      user_id?: number;
      /**
       * @description External identifier of the order
       * @example ORD-20240318-001
       */
      identifier?: string;
      /**
       * @description Indicates whether the order has been confirmed
       * @example true
       */
      confirmed?: boolean;
      /**
       * @description Number of packages in the order
       * @example 2
       */
      packages?: number;
      /**
       * Format: float
       * @description Total weight of the order in kilograms
       * @example 5.25
       */
      weight?: number;
      /**
       * Format: float
       * @description Total order amount
       * @example 199.99
       */
      order_amount?: number;
      /**
       * @description Currency of the order amount
       * @example EUR
       */
      order_currency?: string;
      /**
       * @description Current status of the order
       * @example shipped
       */
      status?: string;
      /** @description Receiver details */
      receiver?: {
        /**
         * @description Receiver's full name
         * @example John Doe
         */
        name?: string;
        /**
         * @description Receiver's phone number
         * @example +37060000000
         */
        phone?: string;
        /**
         * Format: email
         * @description Receiver's email
         * @example john.doe@example.com
         */
        email?: string;
        /**
         * @description Street name of the receiver
         * @example Main Street
         */
        street?: string;
        /**
         * @description House number
         * @example 12A
         */
        house?: string;
        /**
         * @description Apartment number (nullable)
         * @example 34
         */
        apartment?: string | null;
        /**
         * @description City of the receiver
         * @example Vilnius
         */
        city?: string;
        /**
         * @description Receiver's postal code
         * @example LT-12345
         */
        postal_code?: string;
        /**
         * @description Receiver's country code
         * @example LT
         */
        country_code?: string;
      };
      /** @description Delivery details */
      delivery?: {
        /**
         * @description Type of delivery service
         * @example express
         */
        type_code?: string;
      };
      /** @description List of ordered products */
      products?: components["schemas"]["AOrderModification"][];
      /** @description List of returned products */
      returned_products?: components["schemas"]["AOrderModification"][];
      /** @description List of delivery events */
      events?: components["schemas"]["AOrderEvent"][];
      /**
       * @description Shipment barcode
       * @example CE100000000000
       */
      shipment_barcode?: string;
      /**
       * Format: date-time
       * @description Timestamp when the order was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Timestamp when the order was last updated
       * @example 2024-03-19T10:15:30Z
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description Timestamp when the order was cancelled, or null if not cancelled
       * @example null
       */
      cancelled_at?: string | null;
      /**
       * Format: date-time
       * @description Timestamp when the order was delivered, or null if not delivered
       * @example 2024-03-20T14:00:00Z
       */
      delivered_at?: string | null;
    };
    /**
     * Order Collection
     * @description A collection of orders
     */
    AOrderCollection: {
      data?: components["schemas"]["AOrder"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * AProductCatalog
     * @description Details of a product catalog
     */
    AProductCatalog: {
      /**
       * @description Unique identifier of the product catalog
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the user associated with the product catalog
       * @example 42
       */
      user_id?: number;
      /**
       * Format: url
       * @description URL to the products XML feed
       * @example https://example.com/catalog/products.xml
       */
      products_xml_url?: string;
      /**
       * Format: url
       * @description URL to the stock prices XML feed
       * @example https://example.com/catalog/stock_prices.xml
       */
      stock_prices_xml_url?: string;
    };
    /**
     * Product Collection
     * @description A collection of product catalogs
     */
    AProductCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["AProductCatalog"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * Balance Sheet
     * @description Details of a balance sheet
     */
    BalanceSheet: {
      /**
       * @description The unique identifier of the revenue report
       * @example 1
       */
      id?: number;
      /**
       * Format: date
       * @description Start date of the reporting period
       * @example 2024-01-01
       */
      period_start?: string;
      /**
       * Format: date
       * @description End date of the reporting period
       * @example 2024-01-31
       */
      period_end?: string;
      /**
       * Format: float
       * @description Total revenue generated by the user
       * @example 5000.75
       */
      user_revenue?: number;
      /**
       * Format: float
       * @description Total amount of returns
       * @example 200.5
       */
      returns_amount?: number;
      /**
       * Format: float
       * @description Cost of commissions for returned items
       * @example 50
       */
      return_commissions_cost?: number;
      /**
       * Format: float
       * @description Cost of logistics for returned items
       * @example 30
       */
      return_logistics_cost?: number;
      /**
       * Format: float
       * @description Total payouts amount
       * @example 4500.25
       */
      payouts_amount?: number;
      /**
       * Format: date-time
       * @description Timestamp when the revenue report was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
    };
    /**
     * Balance Sheet Collection
     * @description A collection of balance sheets
     */
    BalanceSheetCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["BalanceSheet"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /** Courier Order */
    CourierOrder: {
      /** @example 1 */
      id?: number;
      /** @example 4141146 */
      courier_order_number?: string;
      /** @example dpd */
      courier?: string;
      /**
       * Format: date-time
       * @example 2023-03-30T20:18:00Z
       */
      start_time?: string;
      /**
       * Format: date-time
       * @example 2023-03-30T20:19:00Z
       */
      end_time?: string;
      /** @example 10 */
      user_id?: number;
      /** @example CANCELLED */
      status?: string;
    };
    /**
     * Courier Order Collection
     * @description A collection of courier orders
     */
    CourierOrderCollection: {
      data?: components["schemas"]["CourierOrder"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * Pagination Meta
     * @description Metadata for paginated responses
     */
    PaginationMeta: {
      /**
       * @description Current page number
       * @example 1
       */
      current_page?: number;
      /**
       * @description First item index on the current page
       * @example 1
       */
      from?: number;
      /**
       * @description Total number of pages
       * @example 2
       */
      last_page?: number;
      /**
       * @description Number of items per page
       * @example 10
       */
      per_page?: number;
      /**
       * @description Last item index on the current page
       * @example 10
       */
      to?: number;
      /**
       * @description Total number of items
       * @example 15
       */
      total?: number;
    };
    /**
     * Invoice
     * @description Details of an invoice
     */
    Invoice: {
      /**
       * @description Formatted unique identifier of the invoice
       * @example MST-0001
       */
      id?: string;
      /**
       * Format: date
       * @description Start date of the billing period
       * @example 2024-01-01
       */
      period_start?: string;
      /**
       * Format: date
       * @description End date of the billing period
       * @example 2024-01-31
       */
      period_end?: string;
      /**
       * @description Current status of the invoice
       * @example PAID
       */
      status?: string;
      /**
       * @description Type of invoice
       * @example DEBIT
       */
      type?: string;
      /**
       * @description Name of the invoiced company
       * @example Example Ltd.
       */
      invoice_company_name?: string;
      /**
       * @description Company registration code
       * @example 12345678
       */
      invoice_company_code?: string;
      /**
       * @description VAT number of the company
       * @example LT100001234
       */
      invoice_company_vat_code?: string;
      /**
       * @description Billing address of the company
       * @example 123 Business Street, Vilnius, Lithuania
       */
      invoice_company_address?: string;
      /**
       * @description Phone number of the invoiced company
       * @example +37060000000
       */
      invoice_company_phone?: string;
      /**
       * Format: email
       * @description Email of the invoiced company
       * @example finance@example.com
       */
      invoice_company_email?: string;
      /**
       * @description Bank name where payment is sent
       * @example Bank of Lithuania
       */
      bill_to_bank_name?: string;
      /**
       * @description Country of the receiving bank
       * @example Lithuania
       */
      bill_to_country?: string;
      /**
       * @description IBAN number of the receiving account
       * @example LT601010012345678901
       */
      bill_to_iban?: string;
      /**
       * @description SWIFT/BIC code of the receiving bank
       * @example LT100100
       */
      bill_to_swift?: string;
      /**
       * Format: float
       * @description Subtotal amount before VAT
       * @example 1000.5
       */
      invoice_subtotal?: number;
      /**
       * Format: float
       * @description VAT amount applied to the invoice
       * @example 210.11
       */
      invoice_vat?: number;
      /**
       * Format: float
       * @description Total amount including VAT
       * @example 1210.61
       */
      invoice_total?: number;
      /**
       * Format: date-time
       * @description Timestamp when the invoice was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Timestamp when the invoice was paid, or null if unpaid
       * @example 2024-03-20T10:00:00Z
       */
      paid_at?: string | null;
    };
    /**
     * Invoice Collection
     * @description A collection of invoices
     */
    InvoiceCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["Invoice"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * Modification
     * @description Details of a modification
     */
    Modification: {
      /**
       * @description The unique identifier of the modification
       * @example 1
       */
      id?: number;
      /**
       * @description The title of the modification
       * @example Modification Title
       */
      title?: string;
      /**
       * @description The specific modification title
       * @example Modification Variant
       */
      modification_title?: string;
      /**
       * @description Category of the modification
       * @example Electronics
       */
      category?: string;
      /**
       * @description Supplier SKU code
       * @example MOD123456
       */
      sku?: string;
      /**
       * @description EAN barcode
       * @example 1234567890123
       */
      ean?: string;
      /**
       * @description Stock availability
       * @example 25
       */
      stock?: number;
      /**
       * Format: float
       * @description Price before applying discount
       * @example 199.99
       */
      price_before_discount?: number;
      /**
       * Format: float
       * @description Price after applying discount
       * @example 149.99
       */
      price_after_discount?: number;
      /**
       * Format: url
       * @description URL of the modification image
       * @example https://example.com/images/modification.jpg
       */
      image_url?: string;
    };
    /**
     * Modification Collection
     * @description A collection of modifications
     */
    ModificationCollection: {
      data?: components["schemas"]["Modification"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /** Order Event */
    OrderEvent: {
      /** @example TPT_ORDER_DELIVERED */
      event_code?: string;
      /** @example Order Delivered */
      event_name?: string;
      /** @example 2025-06-03T20:03:55.000000Z */
      event_date?: string;
    };
    /**
     * Order Modification
     * @description Details of a modification within an order
     */
    OrderModification: {
      /**
       * @description Quantity of the modified product in the order
       * @example 2
       */
      quantity?: number;
      /**
       * Format: float
       * @description Price of a single product unit
       * @example 49.99
       */
      product_price?: number;
      /**
       * Format: float
       * @description Total price for the quantity ordered
       * @example 99.98
       */
      total_price?: number;
      /** @description Product details associated with the modification */
      product?: {
        /**
         * @description Title of the main product
         * @example Wireless Headphones
         */
        title?: string;
        /**
         * @description Title of the specific product modification
         * @example Black Edition
         */
        modification_title?: string;
        /**
         * @description Category of the product
         * @example Electronics
         */
        category?: string;
        /**
         * @description Stock keeping unit (SKU) of the modification
         * @example SKU12345
         */
        sku?: string;
        /**
         * @description EAN barcode of the modification
         * @example 1234567890123
         */
        ean?: string;
        /**
         * Format: url
         * @description URL of the product image
         * @example https://example.com/images/product.jpg
         */
        image_url?: string;
      };
    };
    /**
     * Order
     * @description Details of an order
     */
    Order: {
      data: any;
      /**
       * @description Unique identifier of the order
       * @example 123
       */
      id?: number;
      /**
       * @description External identifier of the order
       * @example ORD-20240318-001
       */
      identifier?: string;
      /**
       * @description Indicates whether the order has been confirmed
       * @example true
       */
      confirmed?: boolean;
      /**
       * @description Number of packages in the order
       * @example 2
       */
      packages?: number;
      /**
       * Format: float
       * @description Total weight of the order in kilograms
       * @example 5.25
       */
      weight?: number;
      /**
       * Format: float
       * @description Total order amount
       * @example 199.99
       */
      order_amount?: number;
      /**
       * @description Currency of the order amount
       * @example EUR
       */
      order_currency?: string;
      /**
       * @description Current status of the order
       * @example shipped
       */
      status?: string;
      /** @description Receiver details */
      receiver?: {
        /**
         * @description Receiver's full name
         * @example John Doe
         */
        name?: string;
        /**
         * @description Receiver's phone number
         * @example +37060000000
         */
        phone?: string;
        /**
         * Format: email
         * @description Receiver's email
         * @example john.doe@example.com
         */
        email?: string;
        /**
         * @description Street name of the receiver
         * @example Main Street
         */
        street?: string;
        /**
         * @description House number
         * @example 12A
         */
        house?: string;
        /**
         * @description Apartment number (nullable)
         * @example 34
         */
        apartment?: string | null;
        /**
         * @description City of the receiver
         * @example Vilnius
         */
        city?: string;
        /**
         * @description Receiver's postal code
         * @example LT-12345
         */
        postal_code?: string;
        /**
         * @description Receiver's country code
         * @example LT
         */
        country_code?: string;
      };
      /** @description Delivery details */
      delivery?: {
        /**
         * @description Type of delivery service
         * @example express
         */
        type_code?: string;
      };
      /** @description List of ordered products */
      products?: components["schemas"]["OrderModification"][];
      /** @description List of returned products */
      returned_products?: components["schemas"]["OrderModification"][];
      /** @description List of delivery events */
      events?: components["schemas"]["OrderEvent"][];
      /**
       * @description Shipment barcode
       * @example CE100000000000
       */
      shipment_barcode?: string;
      /**
       * Format: date-time
       * @description Timestamp when the order was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Timestamp when the order was last updated
       * @example 2024-03-19T10:15:30Z
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description Timestamp when the order was cancelled, or null if not cancelled
       * @example null
       */
      cancelled_at?: string | null;
      /**
       * Format: date-time
       * @description Timestamp when the order was delivered, or null if not delivered
       * @example 2024-03-20T14:00:00Z
       */
      delivered_at?: string | null;
    };
    /**
     * Order Collection
     * @description A collection of orders
     */
    OrderCollection: {
      data?: components["schemas"]["Order"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * Price Adjustment
     * @description Details of a price adjustment
     */
    PriceAdjustment: {
      /**
       * @description Unique identifier of the price adjustment
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the user who created the adjustment
       * @example 42
       */
      user_id?: number;
      /**
       * @description Name of the price adjustment
       * @example Holiday Discount
       */
      name?: string;
      /**
       * @description Category to which the adjustment applies
       * @example Electronics
       */
      category?: string;
      /**
       * @description Subcategory to which the adjustment applies
       * @example Laptops
       */
      subcategory?: string | null;
      /**
       * @description Subsubcategory to which the adjustment applies
       * @example Gaming Laptops
       */
      subsubcategory?: string | null;
      /**
       * Format: float
       * @description Percentage discount or markup applied
       * @example 10.5
       */
      percent?: number;
      /**
       * Format: float
       * @description Minimum price range for adjustment
       * @example 100
       */
      price_from?: number;
      /**
       * Format: float
       * @description Maximum price range for adjustment
       * @example 500
       */
      price_to?: number;
      /**
       * Format: date
       * @description Start date from which the adjustment is valid
       * @example 2024-06-01
       */
      valid_from?: string;
      /**
       * Format: date
       * @description End date until which the adjustment is valid
       * @example 2024-12-31
       */
      valid_to?: string;
      /**
       * Format: date-time
       * @description Timestamp when the price adjustment was created
       * @example 2024-03-18T12:34:56Z
       */
      created_at?: string;
    };
    /**
     * Price Adjustment Collection
     * @description A collection of price adjustments
     */
    PriceAdjustmentCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["PriceAdjustment"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * ProductCatalog
     * @description Product Catalog information (XML URL's)
     */
    ProductCatalog: {
      /**
       * @description The unique identifier of the modification
       * @example 1
       */
      id?: number;
      /**
       * @description Products XML URL
       * @example https://example.com/products.xml
       */
      products_xml_url?: string;
      /**
       * @description Stock and prices XML URL
       * @example https://example.com/stockprices.xml
       */
      stock_prices_xml_url?: string;
    };
    /**
     * Product Catalog Collection
     * @description A collection of product catalogs
     */
    ProductCatalogCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["ProductCatalog"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    /**
     * User Profile
     * @description Details of a user's profile
     */
    UserProfile: {
      /**
       * Format: email
       * @description Email address of the user
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Role of the user
       * @example USER
       */
      role?: string;
      /**
       * @description Name of the company associated with the user
       * @example Example Ltd.
       */
      company_name?: string;
      /**
       * @description Company registration code
       * @example 12345678
       */
      company_code?: string;
      /**
       * @description VAT number of the company
       * @example LT100001234
       */
      company_vat_code?: string;
      /**
       * @description Company address
       * @example 123 Business Street, Vilnius, Lithuania
       */
      company_address?: string;
      /**
       * @description Country for pickup location
       * @example Lithuania
       */
      pickup_country?: string;
      /**
       * @description City for pickup location
       * @example Vilnius
       */
      pickup_city?: string;
      /**
       * @description Street for pickup location
       * @example Main Street
       */
      pickup_street?: string;
      /**
       * @description Street number for pickup location
       * @example 12A
       */
      pickup_street_number?: string;
      /**
       * @description ZIP code for pickup location
       * @example LT-12345
       */
      pickup_zip_code?: string;
      /**
       * @description Country for return location
       * @example Lithuania
       */
      return_country?: string;
      /**
       * @description City for return location
       * @example Kaunas
       */
      return_city?: string;
      /**
       * @description Street for return location
       * @example Return Avenue
       */
      return_street?: string;
      /**
       * @description Street number for return location
       * @example 5B
       */
      return_street_number?: string;
      /**
       * @description ZIP code for return location
       * @example LT-54321
       */
      return_zip_code?: string;
      /**
       * @description First name of the user
       * @example John
       */
      name?: string;
      /**
       * @description Last name of the user
       * @example Doe
       */
      last_name?: string;
      /**
       * @description Phone number of the user
       * @example +37060000000
       */
      phone_number?: string;
      /**
       * @description Bank name for transactions
       * @example Bank of Lithuania
       */
      bank_name?: string;
      /**
       * @description IBAN for financial transactions
       * @example LT601010012345678901
       */
      iban?: string;
    };
    /**
     * User
     * @description Details of a user
     */
    User: {
      /**
       * @description Unique identifier of the user
       * @example 1
       */
      id?: number;
      /**
       * Format: email
       * @description Email address of the user
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Role assigned to the user
       * @example admin
       */
      role?: string;
      /**
       * @description Status of the user account
       * @example active
       */
      status?: string;
      /**
       * Format: date-time
       * @description Timestamp of the last login or null if never logged in
       * @example 2024-03-18T10:15:30Z
       */
      last_login_at?: string | null;
      /**
       * Format: date-time
       * @description Timestamp when the user account was created
       * @example 2024-01-01T12:00:00Z
       */
      created_at?: string;
      /**
       * @description Number of products associated with the user (stored as a string)
       * @example 0
       */
      products?: string;
      /**
       * @description Total revenue generated by the user (stored as a string)
       * @example 0
       */
      revenue?: string;
    };
    /**
     * Users Collection
     * @description A collection of users
     */
    UsersCollection: components["schemas"]["PaginationMeta"] & {
      data?: components["schemas"]["User"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getAdminBalanceSheets: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Number of results per page */
        page_size?: number;
        /** @description Id of user to filter sheets */
        user_id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of balance sheets */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ABalanceSheetCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getAdminBalanceSheetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the balance sheet to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Balance sheet details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ABalanceSheet"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Balance sheet not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Balance sheet not found */
            error?: string;
          };
        };
      };
    };
  };
  getAdminInvoices: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Number of results per page */
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of invoices */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AInvoiceCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getAdminInvoiceById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the invoice to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AInvoice"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invoice not found */
            error?: string;
          };
        };
      };
    };
  };
  payAdminInvoice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the invoice to mark as paid */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice marked as paid */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invoice has been marked as paid. */
            message?: string;
          };
        };
      };
      /** @description Invoice cannot be marked as paid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invoice is already paid or invalid state */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invoice not found */
            error?: string;
          };
        };
      };
    };
  };
  getAdminMarkups: {
    parameters: {
      query?: {
        /** @description Filter by markup name */
        name?: string;
        /** @description Filter by marketplace */
        marketplace?: string;
        /** @description Filter by category */
        category?: string;
        /** @description Filter by subcategory */
        subcategory?: string;
        /** @description Filter by subsubcategory */
        subsubcategory?: string;
        /** @description Filter by applicable user ID */
        applicable_user_id?: number;
        /** @description Filter by percentage markup (-100 to 100) */
        percent?: number;
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of markups */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AMarkupCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  createAdminMarkup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Markup creation details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Name of the markup
           * @example Holiday Markup
           */
          name: string;
          /**
           * @description Marketplace where the markup applies
           * @example Amazon
           */
          marketplace: string;
          /**
           * @description Category to which the markup applies
           * @example Electronics
           */
          category: string;
          /**
           * @description Subcategory (optional)
           * @example Laptops
           */
          subcategory?: string | null;
          /**
           * @description Subsubcategory (optional)
           * @example Gaming Laptops
           */
          subsubcategory?: string | null;
          /**
           * Format: float
           * @description Percentage markup (-100 to 100)
           * @example 15.5
           */
          percent: number;
          /**
           * Format: float
           * @description Minimum price range for the markup
           * @example 100
           */
          price_from?: number | null;
          /**
           * Format: float
           * @description Maximum price range for the markup (must be greater than or equal to price_from)
           * @example 500
           */
          price_to?: number | null;
          /**
           * Format: float
           * @description Commission price applied to the markup
           * @example 10
           */
          commission_price?: number | null;
          /**
           * Format: float
           * @description Logistics cost associated with the markup
           * @example 5.5
           */
          logistics_cost?: number | null;
          /**
           * @description User ID for whom this markup applies (optional)
           * @example 42
           */
          applicable_user_id?: number | null;
        };
      };
    };
    responses: {
      /** @description Markup created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AMarkup"];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example price_to must be greater than or equal to price_from */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getAdminMarkupById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the markup to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Markup details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AMarkup"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Markup not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Markup not found */
            error?: string;
          };
        };
      };
    };
  };
  updateAdminMarkup: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the markup to update */
        id: number;
      };
      cookie?: never;
    };
    /** @description Markup update details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Updated name of the markup
           * @example Updated Markup Name
           */
          name?: string | null;
          /**
           * @description Updated marketplace where the markup applies
           * @example eBay
           */
          marketplace?: string | null;
          /**
           * @description Updated category to which the markup applies
           * @example Clothing
           */
          category?: string | null;
          /**
           * @description Updated subcategory (optional)
           * @example Shoes
           */
          subcategory?: string | null;
          /**
           * @description Updated subsubcategory (optional)
           * @example Running Shoes
           */
          subsubcategory?: string | null;
          /**
           * Format: float
           * @description Updated percentage markup (-100 to 100)
           * @example 5
           */
          percent?: number | null;
          /**
           * Format: float
           * @description Updated minimum price range for the markup
           * @example 50
           */
          price_from?: number | null;
          /**
           * Format: float
           * @description Updated maximum price range for the markup (must be greater than or equal to price_from)
           * @example 300
           */
          price_to?: number | null;
          /**
           * Format: float
           * @description Updated commission price applied to the markup
           * @example 8
           */
          commission_price?: number | null;
          /**
           * Format: float
           * @description Updated logistics cost associated with the markup
           * @example 4.5
           */
          logistics_cost?: number | null;
          /**
           * @description Updated user ID for whom this markup applies (optional)
           * @example 100
           */
          applicable_user_id?: number | null;
        };
      };
    };
    responses: {
      /** @description Markup updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AMarkup"];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example price_to must be greater than or equal to price_from */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Markup not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Markup not found */
            error?: string;
          };
        };
      };
    };
  };
  deleteAdminMarkup: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the markup to delete */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Markup deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Confirmation message upon successful deletion
             * @example Markup deleted.
             */
            message?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Markup not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Markup not found */
            error?: string;
          };
        };
      };
    };
  };
  getAdminOrders: {
    parameters: {
      query?: {
        /** @description Filter by product EAN */
        ean?: string;
        /** @description Filter by user ID */
        user_id?: number;
        /** @description Filter by order price */
        price?: number;
        /** @description Filter by order status */
        status?: string;
        /** @description Filter by order date (format: Y-m-d) */
        date?: string;
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of admin orders */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AOrderCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getAdminOrderById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order details with additional status information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AOrder"] & {
            /**
             * @description Object related to the current order status
             * @example Package
             */
            object?: string;
            /**
             * @description Current status code of the order
             * @example SHIPPED
             */
            status_code?: string;
            /**
             * @description Human-readable status text
             * @example Your order has been shipped
             */
            display_text?: string;
            /**
             * @description Location associated with the status update
             * @example Berlin, Germany
             */
            location?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the status update with timezone
             * @example 2024-03-18T12:34:56+02:00
             */
            date?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  returnAdminOrderProducts: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order for which products are being returned */
        id: number;
      };
      cookie?: never;
    };
    /** @description Details of the return process */
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: float
           * @description Delivery costs for the return
           * @example 15
           */
          delivery_costs: number;
          /**
           * Format: float
           * @description Commission costs related to the return
           * @example 5
           */
          commissions: number;
          /**
           * Format: float
           * @description Return costs associated with the process
           * @example 8
           */
          return_costs: number;
          /**
           * Format: float
           * @description Logistics costs related to the return
           * @example 12.5
           */
          logistics_costs: number;
          /**
           * Format: float
           * @description Costs for returning products to the seller
           * @example 10
           */
          return_to_seller_costs: number;
          /** @description List of products being returned */
          products: {
            /**
             * @description Modification ID of the returned product
             * @example 101
             */
            modification_id: number;
            /**
             * @description Quantity of the product being returned
             * @example 2
             */
            quantity: number;
          }[];
        };
      };
    };
    responses: {
      /** @description Products returned successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Products returned successfully. */
            message?: string;
            /**
             * Format: float
             * @description Total amount of the returned products
             * @example 100
             */
            returns_amount?: number;
            returned_products?: components["schemas"]["AOrderCollection"];
          };
        };
      };
      /** @description Invalid return request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invalid return request */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  getAdminProducts: {
    parameters: {
      query?: {
        /** @description Filter by user ID */
        user_id?: number;
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of product modifications */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ModificationCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getAdminProductCatalogs: {
    parameters: {
      query?: {
        /** @description Filter by user ID */
        user_id?: number;
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of product catalogs */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AProductCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getAdminProductById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the product modification to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Product modification details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Modification"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Product modification not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Product modification not found */
            error?: string;
          };
        };
      };
    };
  };
  getAdminUsers: {
    parameters: {
      query?: {
        /** @description Filter by user email */
        email?: string;
        /** @description Filter by user role (USER, ADMIN) */
        role?: "USER" | "ADMIN";
        /** @description Filter by user status (ACTIVE, INACTIVE, BANNED) */
        status?: "ACTIVE" | "INACTIVE" | "BANNED";
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UsersCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  activateAdminUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the user to activate */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User activated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User cannot be activated */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example User is already active */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example User not found */
            error?: string;
          };
        };
      };
    };
  };
  addAdminUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the user to activate */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Admin added successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User cannot be added to admins */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example User is already active */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example User not found */
            error?: string;
          };
        };
      };
    };
  };
  registerUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description User registration details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: email
           * @description User's email address (must be unique)
           * @example user@example.com
           */
          email: string;
          /**
           * Format: password
           * @description User's password (min: 8 characters)
           * @example SecurePass123
           */
          password: string;
          /**
           * @description Company name
           * @example Example Ltd.
           */
          company_name: string;
          /**
           * @description Company registration code
           * @example 12345678
           */
          company_code: string;
          /**
           * @description Company VAT number
           * @example LT100001234
           */
          company_vat_code: string;
          /**
           * @description Company address
           * @example 123 Business Street, Vilnius, Lithuania
           */
          company_address: string;
          /**
           * @description Country for pickup location
           * @example Lithuania
           */
          pickup_country: string;
          /**
           * @description City for pickup location
           * @example Vilnius
           */
          pickup_city: string;
          /**
           * @description Street for pickup location
           * @example Main Street
           */
          pickup_street: string;
          /**
           * @description Street number for pickup location
           * @example 12A
           */
          pickup_street_number: string;
          /**
           * @description ZIP code for pickup location
           * @example LT-12345
           */
          pickup_zip_code: string;
          /**
           * @description Country for return location
           * @example Lithuania
           */
          return_country: string;
          /**
           * @description City for return location
           * @example Kaunas
           */
          return_city: string;
          /**
           * @description Street for return location
           * @example Return Avenue
           */
          return_street: string;
          /**
           * @description Street number for return location
           * @example 5B
           */
          return_street_number: string;
          /**
           * @description ZIP code for return location
           * @example LT-54321
           */
          return_zip_code: string;
          /**
           * @description User's first name (optional)
           * @example John
           */
          name?: string | null;
          /**
           * @description User's last name (optional)
           * @example Doe
           */
          last_name?: string | null;
          /**
           * @description User's phone number (optional)
           * @example +37060000000
           */
          phone_number?: string | null;
          /**
           * @description Bank name (optional)
           * @example Bank of Lithuania
           */
          bank_name?: string | null;
          /**
           * @description User's IBAN for financial transactions (optional)
           * @example LT601010012345678901
           */
          iban?: string | null;
        };
      };
    };
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates successful registration
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Validation error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example The email field is required. */
            error?: string;
          };
        };
      };
    };
  };
  loginUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description User login credentials */
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: email
           * @description User's email address
           * @example user@example.com
           */
          email: string;
          /**
           * Format: password
           * @description User's password
           * @example SecurePass123
           */
          password: string;
        };
      };
    };
    responses: {
      /** @description Successful login */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            access_token?: string;
          };
        };
      };
      /** @description Unauthorized - Invalid credentials */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invalid email or password */
            error?: string;
          };
        };
      };
    };
  };
  logoutUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful logout */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Logout confirmation message
             * @example Successfully logged out
             */
            message?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getUserProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  updateUserProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description User profile update details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Company name
           * @example Example Ltd.
           */
          company_name: string;
          /**
           * @description Company registration code
           * @example 12345678
           */
          company_code: string;
          /**
           * @description Company VAT number
           * @example LT100001234
           */
          company_vat_code: string;
          /**
           * @description Company address
           * @example 123 Business Street, Vilnius, Lithuania
           */
          company_address: string;
          /**
           * @description Country for pickup location
           * @example Lithuania
           */
          pickup_country: string;
          /**
           * @description City for pickup location
           * @example Vilnius
           */
          pickup_city: string;
          /**
           * @description Street for pickup location
           * @example Main Street
           */
          pickup_street: string;
          /**
           * @description Street number for pickup location
           * @example 12A
           */
          pickup_street_number: string;
          /**
           * @description ZIP code for pickup location
           * @example LT-12345
           */
          pickup_zip_code: string;
          /**
           * @description Country for return location
           * @example Lithuania
           */
          return_country: string;
          /**
           * @description City for return location
           * @example Kaunas
           */
          return_city: string;
          /**
           * @description Street for return location
           * @example Return Avenue
           */
          return_street: string;
          /**
           * @description Street number for return location
           * @example 5B
           */
          return_street_number: string;
          /**
           * @description ZIP code for return location
           * @example LT-54321
           */
          return_zip_code: string;
          /**
           * @description User's first name (optional)
           * @example John
           */
          name?: string | null;
          /**
           * @description User's last name (optional)
           * @example Doe
           */
          last_name?: string | null;
          /**
           * @description User's phone number (optional)
           * @example +37060000000
           */
          phone_number?: string | null;
          /**
           * @description Bank name (optional)
           * @example Bank of Lithuania
           */
          bank_name?: string | null;
          /**
           * @description User's IBAN for financial transactions (optional)
           * @example LT601010012345678901
           */
          iban?: string | null;
        };
      };
    };
    responses: {
      /** @description Updated user profile details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
      /** @description Validation error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example The company_name field is required. */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  forgotPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description User's email address for password reset */
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: email
           * @description User's registered email address
           * @example user@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates that the password reset email was sent successfully
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invalid email address */
            error?: string;
          };
        };
      };
      /** @description Email not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Email address not found */
            error?: string;
          };
        };
      };
    };
  };
  resetPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Password reset details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 4-digit password reset token
           * @example 1234
           */
          token: string;
          /**
           * Format: email
           * @description User's registered email address
           * @example user@example.com
           */
          email: string;
          /**
           * Format: password
           * @description New password (minimum 6 characters)
           * @example NewSecurePass123
           */
          password: string;
          /**
           * Format: password
           * @description Password confirmation (must match password)
           * @example NewSecurePass123
           */
          password_confirmation?: string;
        };
      };
    };
    responses: {
      /** @description Password reset successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates that the password was successfully reset
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invalid token or email */
            error?: string;
          };
        };
      };
      /** @description Email not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Email address not found */
            error?: string;
          };
        };
      };
    };
  };
  getBalanceSheets: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Number of results per page */
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of balance sheets */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BalanceSheetCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getBalanceSummary: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Balance summary details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: float
             * @description Total earnings
             * @example 12500.75
             */
            earnings?: number;
            /**
             * Format: float
             * @description Current balance
             * @example 5400.25
             */
            balance?: number;
            /**
             * Format: float
             * @description Total sales amount
             * @example 35000
             */
            total_sales?: number;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getBalanceSheetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the balance sheet to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Balance sheet details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BalanceSheet"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Balance sheet not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Balance sheet not found */
            error?: string;
          };
        };
      };
    };
  };
  getCouriers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of courier types */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getPickupOrders: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Number of items per page */
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of orders */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CourierOrderCollection"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthorized */
            error?: string;
          };
        };
      };
    };
  };
  createPickupOrder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example dpd */
          courier: string;
          /** @example Come to gate 3 */
          pickup_comment?: string;
          /**
           * Format: date-time
           * @example 2023-03-30T20:18:00.000
           */
          start_time: string;
          /**
           * Format: date-time
           * @example 2023-03-30T20:19:00.000
           */
          end_time: string;
          /** @example false */
          is_two_man_pickup?: boolean;
          /** @example false */
          is_heavy_package?: boolean;
          /** @example 15 */
          package_count: number;
          /** @example 1 */
          pallet_count?: number;
        };
      };
    };
    responses: {
      /** @description Courier order created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CourierOrder"];
        };
      };
      /** @description Validation error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            errors?: Record<string, never>;
          };
        };
      };
    };
  };
  cancelPickupOrder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the courier order to cancel */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Courier order cancelled successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CourierOrder"];
        };
      };
      /** @description Courier order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Courier order not found */
            message?: string;
          };
        };
      };
    };
  };
  getPickupOrdersById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of the product */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Courier order */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CourierOrder"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthorized */
            error?: string;
          };
        };
      };
    };
  };
  getInvoices: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Number of results per page */
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of invoices */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InvoiceCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getInvoiceSummary: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice summary details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: float
             * @description Total amount paid from invoices
             * @example 25000.75
             */
            total_paid?: number;
            /**
             * Format: float
             * @description Total amount pending payout
             * @example 5000.5
             */
            total_pending_payout?: number;
            /**
             * @description Total number of invoices
             * @example 120
             */
            total_invoice_count?: number;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getInvoiceById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the invoice to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invoice not found */
            error?: string;
          };
        };
      };
    };
  };
  getOrders: {
    parameters: {
      query?: {
        /** @description Filter by EAN code */
        ean?: string;
        /** @description Filter by price */
        price?: number;
        /** @description Filter by order status */
        status?: string;
        /** @description Filter by order date (format: Y-m-d) */
        date?: string;
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of orders */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrderCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getOrderStats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order statistics */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Total number of orders
             * @example 1500
             */
            total_orders?: number;
            /**
             * Format: float
             * @description Total amount of all orders
             * @example 125000.5
             */
            total_amount?: number;
            /**
             * @description Currency of the total amount
             * @example EUR
             */
            currency?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getDailyOrderStats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Array of daily order statistics */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: date
             * @description Date of the order statistics
             * @example 2024-03-18
             */
            date?: string;
            /**
             * Format: float
             * @description Total order amount for the day
             * @example 1250.75
             */
            total_amount?: number;
            /**
             * @description Currency of the total amount
             * @example EUR
             */
            currency?: string;
          }[];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getOrderCountByStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order count by status */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Number of orders in WAITING status
             * @example 15
             */
            WAITING?: number;
            /**
             * @description Number of orders in CONFIRMED status
             * @example 20
             */
            CONFIRMED?: number;
            /**
             * @description Number of orders in READY_TO_SHIP status
             * @example 10
             */
            READY_TO_SHIP?: number;
            /**
             * @description Number of orders in SHIPPED status
             * @example 30
             */
            SHIPPED?: number;
            /**
             * @description Number of orders in COMPLETED status
             * @example 50
             */
            COMPLETED?: number;
            /**
             * @description Number of orders in CANCELLED status
             * @example 5
             */
            CANCELLED?: number;
            /**
             * @description Number of orders in PARTIALLY_RETURNED status
             * @example 2
             */
            PARTIALLY_RETURNED?: number;
            /**
             * @description Number of orders in RETURNED status
             * @example 8
             */
            RETURNED?: number;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getOrderById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order details with status information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Order"] & {
            /**
             * @description Object related to the current order status
             * @example Package
             */
            object?: string;
            /**
             * @description Current status code of the order
             * @example SHIPPED
             */
            status_code?: string;
            /**
             * @description Human-readable status text
             * @example Your order has been shipped
             */
            display_text?: string;
            /**
             * @description Location associated with the status update
             * @example Vilnius, Lithuania
             */
            location?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the status update with timezone
             * @example 2024-03-18T12:34:56+02:00
             */
            date?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  confirmOrder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order to confirm */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order successfully confirmed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates that the order was confirmed successfully
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Order cannot be confirmed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order is already confirmed or cannot be modified */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  prepareOrderToShip: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order to prepare for shipment */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order successfully marked as ready to ship */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates that the order was successfully prepared for shipment
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Order cannot be prepared for shipment */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order is not in a confirmable state */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  downloadOrderAddressCard: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Address card file returned */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description File not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  shipOrder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order to mark as shipped */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order successfully marked as shipped */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates that the order was successfully marked as shipped
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Order cannot be shipped */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order is not in a shippable state */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  cancelOrder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the order to cancel */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Order successfully cancelled */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Indicates that the order was successfully cancelled
             * @example true
             */
            success?: boolean;
          };
        };
      };
      /** @description Order cannot be cancelled */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order is already shipped and cannot be cancelled */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Order not found */
            error?: string;
          };
        };
      };
    };
  };
  getPriceAdjustments: {
    parameters: {
      query?: {
        /** @description Filter by price adjustment name */
        name?: string;
        /** @description Filter by category */
        category?: string;
        /** @description Filter by subcategory */
        subcategory?: string;
        /** @description Filter by subsubcategory */
        subsubcategory?: string;
        /** @description Filter by percentage adjustment (-100 to 100) */
        percent?: number;
        /** @description Number of results per page (Min: 1, Max: 100) */
        page_size?: number;
        /** @description Page number for pagination */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of price adjustments */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PriceAdjustmentCollection"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  createPriceAdjustment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Price adjustment details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Name of the price adjustment
           * @example Holiday Discount
           */
          name?: string | null;
          /**
           * @description Category associated with the adjustment
           * @example Electronics
           */
          category?: string | null;
          /**
           * @description Subcategory associated with the adjustment
           * @example Laptops
           */
          subcategory?: string | null;
          /**
           * @description Subsubcategory associated with the adjustment
           * @example Gaming Laptops
           */
          subsubcategory?: string | null;
          /**
           * Format: float
           * @description Percentage adjustment (-100 to 100)
           * @example 10.5
           */
          percent?: number | null;
          /**
           * Format: float
           * @description Minimum price range for the adjustment
           * @example 100
           */
          price_from?: number | null;
          /**
           * Format: float
           * @description Maximum price range for the adjustment (must be greater than or equal to price_from)
           * @example 500
           */
          price_to?: number | null;
          /**
           * Format: date
           * @description Start date from which the adjustment is valid
           * @example 2024-06-01
           */
          valid_from?: string | null;
          /**
           * Format: date
           * @description End date until which the adjustment is valid
           * @example 2024-12-31
           */
          valid_to?: string | null;
        };
      };
    };
    responses: {
      /** @description Price adjustment created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PriceAdjustment"];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Invalid percentage value */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
    };
  };
  getPriceAdjustmentById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the price adjustment to retrieve */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Price adjustment details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PriceAdjustment"];
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Price adjustment not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Price adjustment not found */
            error?: string;
          };
        };
      };
    };
  };
  updatePriceAdjustment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the price adjustment to update */
        id: number;
      };
      cookie?: never;
    };
    /** @description Price adjustment update details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Name of the price adjustment
           * @example Holiday Discount
           */
          name?: string | null;
          /**
           * @description Category associated with the adjustment
           * @example Electronics
           */
          category?: string | null;
          /**
           * @description Subcategory associated with the adjustment
           * @example Laptops
           */
          subcategory?: string | null;
          /**
           * @description Subsubcategory associated with the adjustment
           * @example Gaming Laptops
           */
          subsubcategory?: string | null;
          /**
           * Format: float
           * @description Percentage adjustment (-100 to 100)
           * @example 10.5
           */
          percent?: number | null;
          /**
           * Format: float
           * @description Minimum price range for the adjustment
           * @example 100
           */
          price_from?: number | null;
          /**
           * Format: float
           * @description Maximum price range for the adjustment (must be greater than or equal to price_from)
           * @example 500
           */
          price_to?: number | null;
          /**
           * Format: date
           * @description Start date from which the adjustment is valid
           * @example 2024-06-01
           */
          valid_from?: string | null;
          /**
           * Format: date
           * @description End date until which the adjustment is valid
           * @example 2024-12-31
           */
          valid_to?: string | null;
        };
      };
    };
    responses: {
      /** @description Price adjustment updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PriceAdjustment"];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example price_to must be greater than or equal to price_from */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Price adjustment not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Price adjustment not found */
            error?: string;
          };
        };
      };
    };
  };
  deletePriceAdjustment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the price adjustment to delete */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Price adjustment deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Confirmation message upon successful deletion
             * @example PriceAdjustment deleted.
             */
            message?: string;
          };
        };
      };
      /** @description Unauthorized - User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthenticated */
            error?: string;
          };
        };
      };
      /** @description Price adjustment not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Price adjustment not found */
            error?: string;
          };
        };
      };
    };
  };
  getProducts: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Number of items per page */
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ModificationCollection"];
        };
      };
    };
  };
  getProductCatalogs: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductCatalog"];
        };
      };
    };
  };
  addProductCatalog: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Product catalog details */
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: url
           * @description URL to the products XML feed
           * @example https://example.com/catalog/products.xml
           */
          products_xml_url: string;
          /**
           * Format: url
           * @description URL to the stock prices XML feed
           * @example https://example.com/catalog/stock_prices.xml
           */
          stock_prices_xml_url: string;
        };
      };
    };
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductCatalog"];
        };
      };
    };
  };
  getProductById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Id of the product */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Modification"];
        };
      };
    };
  };
  getProductCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of product categories */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            "Vaikams ir k\u016Bdikiams"?: {
              "\u017Daislai vaikams iki 3 met\u0173"?: string[];
              "\u017Daislai vaikams nuo 3 met\u0173"?: string[];
            };
          };
        };
      };
    };
  };
}
